
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R 是自由軟體，不提供任何擔保。
在某些條件下歡迎您將其散佈。
用 'license()' 或 'licence()' 來獲得散佈的詳細條件。

R 是個協作計劃，有許多人為之做出了貢獻。
用 'contributors()' 來看詳細的情況以及
用 'citation()' 會告訴您如何在出版品中正確地參照 R 或 R 套件。

用 'demo()' 來看一些示範程式，用 'help()' 來檢視線上輔助檔案，或
用 'help.start()' 透過 HTML 瀏覽器來看輔助檔案。
用 'q()' 離開 R。

[原來儲存的工作空間已還原]

> library(spam);library(dotCall64);library(grid);library(maps);library(geoR)
Spam version 2.9-1 (2022-08-07) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

載入套件：'spam'

下列物件被遮斷自 'package:base':

    backsolve, forwardsolve

--------------------------------------------------------------
 Analysis of Geostatistical Data
 For an Introduction to geoR go to http://www.leg.ufpr.br/geoR
 geoR version 1.9-2 (built on 2022-08-09) is now loaded
--------------------------------------------------------------

警告訊息：
沒有 DISPLAY 變數，因此沒有 Tk 這個功能 
> library(fields);library(MASS);library(autoFRK);library(psych);library(SpatialTools)
載入需要的套件：viridis
載入需要的套件：viridisLite

載入套件：'viridis'

下列物件被遮斷自 'package:maps':

    unemp


Try help(fields) to get started.

載入套件：'psych'

下列物件被遮斷自 'package:fields':

    describe

# This research was partially supported under NSF Grant ATM-0534173

載入套件：'SpatialTools'

下列物件被遮斷自 'package:spam':

    rmvnorm

> load("02 1.RData")
> truebeta <- c(1,1,1)
> I <- diag(1,100); In <- diag(1,3)
> 
> beta_gls <- matrix(,n,3)
> biasgls <- matrix(,n,3); vargls <- matrix(,n,3); msegls <- c()
> #beta_ls<-matrix(,n,3)
> #biasls <- matrix(,n,3); varls <- matrix(,n,3); msels <- c()
> 
> max_K <- matrix(,n,1)
> K <- matrix(,n,2)
> Kauto <- matrix(,n,3) #beta, K
> biasKauto <- matrix(,n,3); varKauto <- matrix(,n,3); mseKauto <- c()
> Kauto2 <- matrix(,n,3) #beta, K
> biasKauto2 <- matrix(,n,3); varKauto2 <- matrix(,n,3); mseKauto2 <- c()
> Kauto3 <- matrix(,n,3) #beta, K
> biasKauto3 <- matrix(,n,3); varKauto3 <- matrix(,n,3); mseKauto3 <- c()
> Kauto4 <- matrix(,n,3) #beta, K
> biasKauto4 <- matrix(,n,3); varKauto4 <- matrix(,n,3); mseKauto4 <- c()
> #Kauto5 <- matrix(,n,3) #beta, K
> #biasKauto5 <- matrix(,n,3); varKauto5 <- matrix(,n,3); mseKauto5 <- c()
> 
> t1 <- proc.time()
> u <- 1
> for(u in 1:n){
+   set.seed(u+11)
+   #data------------
+    bination <- cbind(grids,t(rbind(x1[u,],x2[u,],y[u,],z[u,])))
+    Data <- rbind(bination[sample_100[u,1:100],])
+    X <- cbind(1,Data[,3:4])
+ 
+   #LSE------------
+   # lmm<-lm(Data[,5]~Data[,3:4])
+   # beta_ls[u,]<-lmm$coefficients
+   # biasls[u,] <- beta_ls[u,]-truebeta
+ 
+  #GLS------------
+   #c(sigmasq[1],lambdavector[1]);c(4,p)
+    gls <- likfit(data=Data[,5],coords=Data[,1:2],trend=trend.spatial(~Data[,3:4]),ini=c(4,p),
+             fix.nugget=F,fix.kappa=F,cov.model="matern",lik.method ="ML",message=F)   
+    beta_gls[u,] <- gls$beta
+    Xbeta_gls <- gls$beta[1]+gls$beta[2]*X[,2]+gls$beta[3]*X[,3]     #X*hat_beta_gls
+    
+    biasgls[u,] <- beta_gls[u,]-truebeta
+    msegls[u] <- sum((beta_gls[u,]-truebeta)^2)
+ 
+    ytilde_w <- autoFRK(Data=Data[,5], loc=Data[,1:2], mu=Xbeta_gls)
+    
+ #hat_K[u,4] <- ncol(ytilde_w$G)
+    max_K[u,] <- ncol(ytilde_w$G)
+     A <- function(par){
+      Data_k <- matrix(,100,2)
+      Data_k[,1] <- predict(autoFRK(Data=Data[,3], loc=Data[,1:2], mu=0, Kseq=par) )$pred.value
+      Data_k[,2] <- predict(autoFRK(Data=Data[,4], loc=Data[,1:2], mu=0, Kseq=par) )$pred.value
+      if(prod(Data_k[,1])==0 || prod(Data_k[,2])==0){
+      return(c(Inf,Inf,Inf,Inf))
+      }else{
+      fit <- likfit(data=Data[,5],coords=Data[,1:2],trend=trend.spatial(~Data_k),ini=c(4,p),
+             fix.nugget=F,fix.kappa=F,cov.model="matern",lik.method ="ML",message=F) 
+      return(c( fit$beta,sqrt(sum((gls$beta - fit$beta)^2))))
+      }
+    }
+ oo <- sapply(3: max_K[u,], function(i){A(i)})
+ a <- quantile(oo[4,],seq(0.25,0.35,0.1))
+ K[u,1] <- min(which(oo[4,-(1:3)]<=a[1]))+5
+ K[u,2] <- min(which(oo[4,-(1:3)]<=a[2]))+5
+ #K[u,3] <- min(which(oo[4,-(1:3)]<=a[3]))+5
+ #K[u,4] <- min(which(oo[4,-(1:3)]<=a[4]))+5
+ #K[u,5] <- min(which(oo[4,-(1:3)]<=a[5]))+5
+ 
+ #plot(x=c(4:max_K[u,]),y=oo[4,1:93],type="b",col=8)
+ #a <- 3
+ #hat_Kvalue <- 0
+ #repeat{
+ #  diff <- matrix(,max_K[u,]-a-2,a)
+ #  for(j in 1:a){
+ #    if(j==a){
+ #    diff[,j] <- abs(oo[4,-(1:j)]-oo[4,-((ncol(oo)-j+1):ncol(oo))])
+ #    }else{
+ #    diff[,j] <- abs(oo[4,-(1:j)]-oo[4,-((ncol(oo)-j+1):ncol(oo))])[-(1:(a-j))]
+ #    }
+ #  }
+ #  o2 <- sapply(1:nrow(diff),function(j){sum(diff[j,])})
+ #  hat_K <- max( which(o2==min(o2)) )+2+a
+ #print(hat_K)
+ #  if(hat_K==hat_Kvalue){
+ #  break
+ #  }else{
+ #hat_Kvalue <- hat_K
+ #  a <- a+1
+ #print(a)
+ #  }
+ #}
+ #K[u,] <- hat_K-a
+  #K=auto------------
+    B <- function(par){
+ 
+      x1_w <- autoFRK(Data=Data[,3], loc=Data[,1:2], mu=0, Kseq=par)
+      x2_w <- autoFRK(Data=Data[,4], loc=Data[,1:2], mu=0, Kseq=par)
+      ytilde_w <- autoFRK(Data=Data[,5], loc=Data[,1:2], mu=Xbeta_gls, Kseq=par)
+      
+      hat_x1 <- predict(x1_w)$pred.value
+      hat_x2 <- predict(x2_w)$pred.value
+      hat_X <- cbind(0,hat_x1,hat_x2)                                  #hat_X
+ 
+      hat_ytilde_w <- predict(ytilde_w)$pred.value                     #hat_W*
+      cov_ytilde_w <- ytilde_w$G %*% ytilde_w$M %*% t(ytilde_w$G)      #FMF
+      Q <- solve(In - solve(t(X) %*% X) %*% t(X) %*% (hat_X))
+ 
+      P <- X %*% solve(t(X) %*% X) %*% t(X)
+      cov_rsr_y <- (I-P) %*% cov_ytilde_w %*% t(I-P) + ytilde_w$s*I
+      b_rsr <- solve(t(X) %*% solve(cov_rsr_y) %*% X) %*% t(X) %*% solve(cov_rsr_y) %*% Data[,5]
+      beta_FRK <- Q %*% (b_rsr - solve(t(X) %*% X) %*% t(X) %*% (hat_ytilde_w + (hat_X) %*% gls$beta)) 
+      return( c(beta_FRK) )
+    }
+    Kauto[u,] <- B(K[u,1])
+    biasKauto[u,] <- Kauto[u,1:3]-truebeta
+    mseKauto[u] <- sum((Kauto[u,1:3]-truebeta)^2)  
+ 
+    Kauto2[u,] <- B(K[u,2])
+    biasKauto2[u,] <- Kauto2[u,1:3]-truebeta
+    mseKauto2[u] <- sum((Kauto2[u,1:3]-truebeta)^2)
+ 
+ #   Kauto3[u,] <- B(K[u,3])
+ #   biasKauto3[u,] <- Kauto3[u,1:3]-truebeta
+ #   mseKauto3[u] <- sum((Kauto3[u,1:3]-truebeta)^2)
+ 
+ #   Kauto4[u,] <- B(K[u,4])
+ #   biasKauto4[u,] <- Kauto4[u,1:3]-truebeta
+ #   mseKauto4[u] <- sum((Kauto4[u,1:3]-truebeta)^2)
+ 
+ #   Kauto5[u,] <- B(K[u,5])
+ #   biasKauto5[u,] <- Kauto5[u,1:3]-truebeta
+ #   mseKauto5[u] <- sum((Kauto5[u,1:3]-truebeta)^2)
+   #replace90
+   T <- 20
+   beta_FRK <- matrix(,T,3)
+   I2 <- diag(1,90)
+   for(i in 1:T){
+    subData <- Data[sample(1:100,90),]
+    subX <- cbind(1,subData[,3:4])
+    gls <- likfit(data=subData[,5],coords=subData[,1:2],trend=trend.spatial(~subData[,3:4]),ini=c(4,p),
+             fix.nugget=F,fix.kappa=F,cov.model="matern",lik.method ="ML",message=F)   
+    Xbeta_gls <- gls$beta[1]+gls$beta[2]*subX[,2]+gls$beta[3]*subX[,3]     #X*hat_beta_gls
+    ytilde_w <- autoFRK(Data=subData[,5], loc=subData[,1:2], mu=Xbeta_gls)
+      x1_w <- autoFRK(Data=subData[,3], loc=subData[,1:2], mu=0, Kseq=ncol(ytilde_w$G))
+      x2_w <- autoFRK(Data=subData[,4], loc=subData[,1:2], mu=0, Kseq=ncol(ytilde_w$G))
+      
+      hat_x1 <- predict(x1_w)$pred.value
+      hat_x2 <- predict(x2_w)$pred.value
+      hat_X <- cbind(0,hat_x1,hat_x2)                                  #hat_X
+ 
+     hat_ytilde_w <- predict(ytilde_w)$pred.value                     #hat_W*
+      cov_ytilde_w <- ytilde_w$G %*% ytilde_w$M %*% t(ytilde_w$G)      #FMF
+      Q <- solve(In - solve(t(subX) %*% subX) %*% t(subX) %*% (hat_X))
+ 
+      P <- subX %*% solve(t(subX) %*% subX) %*% t(subX)
+      cov_rsr_y <- (I2-P) %*% cov_ytilde_w %*% t(I2-P) + ytilde_w$s*I2
+      b_rsr <- solve(t(subX) %*% solve(cov_rsr_y) %*% subX) %*% t(subX) %*% solve(cov_rsr_y) %*% subData[,5]
+      beta_FRK[i,] <- Q %*% (b_rsr - solve(t(subX) %*% subX) %*% t(subX) %*% (hat_ytilde_w + (hat_X) %*% gls$beta)) 
+   }
+    Kauto3[u,] <- sapply(1:3,function(j){mean(beta_FRK[,j])})
+    biasKauto3[u,] <- Kauto3[u,1:3]-truebeta
+    mseKauto3[u] <- sum((Kauto3[u,1:3]-truebeta)^2)
+ 
+   T <- 50
+   beta_FRK <- matrix(,T,3)
+   I2 <- diag(1,90)
+   for(i in 1:T){
+    subData <- Data[sample(1:100,90),]
+    subX <- cbind(1,subData[,3:4])
+    gls <- likfit(data=subData[,5],coords=subData[,1:2],trend=trend.spatial(~subData[,3:4]),ini=c(4,p),
+             fix.nugget=F,fix.kappa=F,cov.model="matern",lik.method ="ML",message=F)   
+    Xbeta_gls <- gls$beta[1]+gls$beta[2]*subX[,2]+gls$beta[3]*subX[,3]     #X*hat_beta_gls
+    ytilde_w <- autoFRK(Data=subData[,5], loc=subData[,1:2], mu=Xbeta_gls)
+      x1_w <- autoFRK(Data=subData[,3], loc=subData[,1:2], mu=0, Kseq=ncol(ytilde_w$G))
+      x2_w <- autoFRK(Data=subData[,4], loc=subData[,1:2], mu=0, Kseq=ncol(ytilde_w$G))
+      
+      hat_x1 <- predict(x1_w)$pred.value
+      hat_x2 <- predict(x2_w)$pred.value
+      hat_X <- cbind(0,hat_x1,hat_x2)                                  #hat_X
+ 
+     hat_ytilde_w <- predict(ytilde_w)$pred.value                     #hat_W*
+      cov_ytilde_w <- ytilde_w$G %*% ytilde_w$M %*% t(ytilde_w$G)      #FMF
+      Q <- solve(In - solve(t(subX) %*% subX) %*% t(subX) %*% (hat_X))
+ 
+      P <- subX %*% solve(t(subX) %*% subX) %*% t(subX)
+      cov_rsr_y <- (I2-P) %*% cov_ytilde_w %*% t(I2-P) + ytilde_w$s*I2
+      b_rsr <- solve(t(subX) %*% solve(cov_rsr_y) %*% subX) %*% t(subX) %*% solve(cov_rsr_y) %*% subData[,5]
+      beta_FRK[i,] <- Q %*% (b_rsr - solve(t(subX) %*% subX) %*% t(subX) %*% (hat_ytilde_w + (hat_X) %*% gls$beta)) 
+   }
+    Kauto4[u,] <- sapply(1:3,function(j){mean(beta_FRK[,j])})
+    biasKauto4[u,] <- Kauto4[u,1:3]-truebeta
+    mseKauto4[u] <- sum((Kauto4[u,1:3]-truebeta)^2)
+    print(u)
+ }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 101
[1] 102
[1] 103
[1] 104
[1] 105
[1] 106
[1] 107
[1] 108
[1] 109
[1] 110
[1] 111
[1] 112
[1] 113
[1] 114
[1] 115
[1] 116
[1] 117
[1] 118
[1] 119
[1] 120
[1] 121
[1] 122
[1] 123
[1] 124
[1] 125
[1] 126
[1] 127
[1] 128
[1] 129
[1] 130
[1] 131
[1] 132
[1] 133
[1] 134
[1] 135
[1] 136
[1] 137
[1] 138
[1] 139
[1] 140
[1] 141
[1] 142
[1] 143
[1] 144
[1] 145
[1] 146
[1] 147
[1] 148
[1] 149
[1] 150
[1] 151
[1] 152
[1] 153
[1] 154
[1] 155
[1] 156
[1] 157
[1] 158
[1] 159
[1] 160
[1] 161
[1] 162
[1] 163
[1] 164
[1] 165
[1] 166
[1] 167
[1] 168
[1] 169
[1] 170
[1] 171
[1] 172
[1] 173
[1] 174
[1] 175
[1] 176
[1] 177
[1] 178
[1] 179
[1] 180
[1] 181
[1] 182
[1] 183
[1] 184
[1] 185
[1] 186
[1] 187
[1] 188
[1] 189
[1] 190
[1] 191
[1] 192
[1] 193
[1] 194
[1] 195
[1] 196
[1] 197
[1] 198
[1] 199
[1] 200
[1] 201
[1] 202
[1] 203
[1] 204
[1] 205
[1] 206
[1] 207
[1] 208
[1] 209
[1] 210
[1] 211
[1] 212
[1] 213
[1] 214
[1] 215
[1] 216
[1] 217
[1] 218
[1] 219
[1] 220
[1] 221
[1] 222
[1] 223
[1] 224
[1] 225
[1] 226
[1] 227
[1] 228
[1] 229
[1] 230
[1] 231
[1] 232
[1] 233
[1] 234
[1] 235
[1] 236
[1] 237
[1] 238
[1] 239
[1] 240
[1] 241
[1] 242
[1] 243
[1] 244
[1] 245
[1] 246
[1] 247
[1] 248
[1] 249
[1] 250
[1] 251
[1] 252
[1] 253
[1] 254
[1] 255
[1] 256
[1] 257
[1] 258
[1] 259
[1] 260
[1] 261
[1] 262
[1] 263
[1] 264
[1] 265
[1] 266
[1] 267
[1] 268
[1] 269
[1] 270
[1] 271
[1] 272
[1] 273
[1] 274
[1] 275
[1] 276
[1] 277
[1] 278
[1] 279
[1] 280
[1] 281
[1] 282
[1] 283
[1] 284
[1] 285
[1] 286
[1] 287
[1] 288
[1] 289
[1] 290
[1] 291
[1] 292
[1] 293
[1] 294
[1] 295
[1] 296
[1] 297
[1] 298
[1] 299
[1] 300
[1] 301
[1] 302
[1] 303
[1] 304
[1] 305
[1] 306
[1] 307
[1] 308
[1] 309
[1] 310
[1] 311
[1] 312
[1] 313
[1] 314
[1] 315
[1] 316
[1] 317
[1] 318
[1] 319
[1] 320
[1] 321
[1] 322
[1] 323
[1] 324
[1] 325
[1] 326
[1] 327
[1] 328
[1] 329
[1] 330
[1] 331
[1] 332
[1] 333
[1] 334
[1] 335
[1] 336
[1] 337
[1] 338
[1] 339
[1] 340
[1] 341
[1] 342
[1] 343
[1] 344
[1] 345
[1] 346
[1] 347
[1] 348
[1] 349
[1] 350
[1] 351
[1] 352
[1] 353
[1] 354
[1] 355
[1] 356
[1] 357
[1] 358
[1] 359
[1] 360
[1] 361
[1] 362
[1] 363
[1] 364
[1] 365
[1] 366
[1] 367
[1] 368
[1] 369
[1] 370
[1] 371
[1] 372
[1] 373
[1] 374
[1] 375
[1] 376
[1] 377
[1] 378
[1] 379
[1] 380
[1] 381
[1] 382
[1] 383
[1] 384
[1] 385
[1] 386
[1] 387
[1] 388
[1] 389
[1] 390
[1] 391
[1] 392
[1] 393
[1] 394
[1] 395
[1] 396
[1] 397
[1] 398
[1] 399
[1] 400
> proc.time()-t1
   使用者      系統      流逝 
34012.765  2130.167 36795.126 
> w <- n
> 
> 
> mean(K[1:w,1])
[1] 61.8075
> sd(K[1:w,1])/sqrt(w)
[1] 0.7537799
> sapply(1:3, function(i){round(mean(Kauto[1:w,i]),4)})
[1] 0.9074 1.0009 1.0089
> sapply(1:3, function(i){round(sd(Kauto[1:w,i])/sqrt(w),4)})
[1] 0.0727 0.0086 0.0031
> 
> sapply(1:3, function(i){round(mean(biasKauto[1:w,i]),4)})
[1] -0.0926  0.0009  0.0089
> 
> v <- 1
> for(v in 1:w){
+   varKauto[v,] <- sapply(1:3, function(i){(Kauto[v,i]-mean(Kauto[1:w,i]))^2 })
+ }
> vv<-sapply(1:3, function(i){round(mean(varKauto[1:w,i]),4)})
> vv
[1] 2.1091 0.0295 0.0039
> TF <-sapply(1:w, function(v){
+   L <- Kauto[v,1:3]-1.96*sqrt(vv)
+   U <- Kauto[v,1:3]+1.96*sqrt(vv)
+   L< c(beta0,beta1,beta2) & c(beta0,beta1,beta2)<U
+ })
> table(TF[1,])/w

 FALSE   TRUE 
0.0475 0.9525 
> table(TF[2,])/w

 FALSE   TRUE 
0.0525 0.9475 
> table(TF[3,])/w

 FALSE   TRUE 
0.0625 0.9375 
> round(mean(mseKauto[1:w]),4)
[1] 2.1512
> round(sd(mseKauto[1:w])/sqrt(w),4)
[1] 0.1356
> #=============================================================================
> mean(K[1:w,2])
[1] 52.7725
> sd(K[1:w,2])/sqrt(w)
[1] 0.7211376
> sapply(1:3, function(i){round(mean(Kauto2[1:w,i]),4)})
[1] 0.9073 0.9975 1.0102
> sapply(1:3, function(i){round(sd(Kauto2[1:w,i])/sqrt(w),4)})
[1] 0.0727 0.0076 0.0028
> 
> sapply(1:3, function(i){round(mean(biasKauto2[1:w,i]),4)})
[1] -0.0927 -0.0025  0.0102
> 
> v <- 1
> for(v in 1:w){
+   varKauto2[v,] <- sapply(1:3, function(i){(Kauto2[v,i]-mean(Kauto2[1:w,i]))^2 })
+ }
> vv<-sapply(1:3, function(i){round(mean(varKauto2[1:w,i]),4)})
> vv
[1] 2.1093 0.0231 0.0032
> TF <-sapply(1:w, function(v){
+   L <- Kauto2[v,1:3]-1.96*sqrt(vv)
+   U <- Kauto2[v,1:3]+1.96*sqrt(vv)
+   L< c(beta0,beta1,beta2) & c(beta0,beta1,beta2)<U
+ })
> table(TF[1,])/w

 FALSE   TRUE 
0.0475 0.9525 
> table(TF[2,])/w

FALSE  TRUE 
0.055 0.945 
> table(TF[3,])/w

FALSE  TRUE 
 0.05  0.95 
> round(mean(mseKauto2[1:w]),4)
[1] 2.1443
> round(sd(mseKauto2[1:w])/sqrt(w),4)
[1] 0.1354
> 
> #======================================================================================
> 
> #mean(K[1:w,3])
> #sd(K[1:w,3])/sqrt(w)
> sapply(1:3, function(i){round(mean(Kauto3[1:w,i]),4)})
[1] 0.9080 1.0221 1.0107
> sapply(1:3, function(i){round(sd(Kauto3[1:w,i])/sqrt(w),4)})
[1] 0.0727 0.0236 0.0075
> 
> sapply(1:3, function(i){round(mean(biasKauto3[1:w,i]),4)})
[1] -0.0920  0.0221  0.0107
> 
> v <- 1
> for(v in 1:w){
+   varKauto3[v,] <- sapply(1:3, function(i){(Kauto3[v,i]-mean(Kauto3[1:w,i]))^2 })
+ }
> vv<-sapply(1:3, function(i){round(mean(varKauto3[1:w,i]),4)})
> vv
[1] 2.1111 0.2225 0.0225
> TF <-sapply(1:w, function(v){
+   L <- Kauto3[v,1:3]-1.96*sqrt(vv)
+   U <- Kauto3[v,1:3]+1.96*sqrt(vv)
+   L< c(beta0,beta1,beta2) & c(beta0,beta1,beta2)<U
+ })
> table(TF[1,])/w

FALSE  TRUE 
0.045 0.955 
> table(TF[2,])/w

FALSE  TRUE 
0.065 0.935 
> table(TF[3,])/w

 FALSE   TRUE 
0.0475 0.9525 
> round(mean(mseKauto3[1:w]),4)
[1] 2.3652
> round(sd(mseKauto3[1:w])/sqrt(w),4)
[1] 0.1367
> 
> #======================================================================================
> #mean(K[1:w,4])
> #sd(K[1:w,4])/sqrt(w)
> sapply(1:3, function(i){round(mean(Kauto4[1:w,i]),4)})
[1] 0.9078 1.0155 1.0082
> sapply(1:3, function(i){round(sd(Kauto4[1:w,i])/sqrt(w),4)})
[1] 0.0727 0.0237 0.0073
> 
> sapply(1:3, function(i){round(mean(biasKauto4[1:w,i]),4)})
[1] -0.0922  0.0155  0.0082
> 
> v <- 1
> for(v in 1:w){
+   varKauto4[v,] <- sapply(1:3, function(i){(Kauto4[v,i]-mean(Kauto4[1:w,i]))^2 })
+ }
> vv<-sapply(1:3, function(i){round(mean(varKauto4[1:w,i]),4)})
> vv
[1] 2.1107 0.2249 0.0215
> TF <-sapply(1:w, function(v){
+   L <- Kauto4[v,1:3]-1.96*sqrt(vv)
+   U <- Kauto4[v,1:3]+1.96*sqrt(vv)
+   L< c(beta0,beta1,beta2) & c(beta0,beta1,beta2)<U
+ })
> table(TF[1,])/w

FALSE  TRUE 
0.045 0.955 
> table(TF[2,])/w

FALSE  TRUE 
0.055 0.945 
> table(TF[3,])/w

FALSE  TRUE 
0.045 0.955 
> round(mean(mseKauto4[1:w]),4)
[1] 2.366
> round(sd(mseKauto4[1:w])/sqrt(w),4)
[1] 0.1375
> 
> 
> 
> #======================================================================================
> 
> #sapply(1:3, function(i){round(mean(beta_ls[1:w,i]),4)})
> #sapply(1:3, function(i){round(sd(beta_ls[1:w,i])/sqrt(w),4)})
> 
> #sapply(1:3, function(i){round(mean(biasls[1:w,i]),4)})
> 
> #v <- 1
> #for(v in 1:w){
> #varls[v,] <- sapply(1:3, function(i){(beta_ls[v,i]-mean(beta_ls[1:w,i]))^2 })
> #}
> #vv<-sapply(1:3, function(i){round(mean(varls[1:w,i]),4)})
> #vv
> #TF <-sapply(1:w, function(v){
> #L <- beta_ls[v,1:3]-1.96*sqrt(vv)
> #U <- beta_ls[v,1:3]+1.96*sqrt(vv)
> #L< c(beta0,beta1,beta2) & c(beta0,beta1,beta2)<U
> #})
> #table(TF[1,])/w
> #table(TF[2,])/w
> #table(TF[3,])/w
> 
> #round(mean(msels[1:w]),4)
> #round(sd(msels[1:w])/sqrt(w),4)
> 
> #=============
> sapply(1:3, function(i){round(mean(beta_gls[1:w,i]),4)})
[1] 0.9073 0.9990 1.0258
> sapply(1:3, function(i){round(sd(beta_gls[1:w,i])/sqrt(w),4)})
[1] 0.0727 0.0062 0.0021
> 
> sapply(1:3, function(i){round(mean(biasgls[1:w,i]),4)})
[1] -0.0927 -0.0010  0.0258
> 
> v <- 1
> for(v in 1:w){
+ vargls[v,] <- sapply(1:3, function(i){(beta_gls[v,i]-mean(beta_gls[1:w,i]))^2 })
+ }
> vv<-sapply(1:3, function(i){round(mean(vargls[1:w,i]),4)})
> vv
[1] 2.1086 0.0154 0.0018
> TF <-sapply(1:w, function(v){
+ L <- beta_gls[v,1:3]-1.96*sqrt(vv)
+ U <- beta_gls[v,1:3]+1.96*sqrt(vv)
+ L< c(beta0,beta1,beta2) & c(beta0,beta1,beta2)<U
+ })
> table(TF[1,])/w

 FALSE   TRUE 
0.0475 0.9525 
> table(TF[2,])/w

 FALSE   TRUE 
0.0575 0.9425 
> table(TF[3,])/w

FALSE  TRUE 
0.085 0.915 
> 
> round(mean(msegls[1:w]),4)
[1] 2.1351
> round(sd(msegls[1:w])/sqrt(w),4)
[1] 0.1354
> 
> #setEPS()
> #postscript("081.eps")
> #MSE <- c(mean(mseKauto[1:w]),mean(mseKauto2[1:w]),mean(mseKauto3[1:w]),mean(mseKauto4[1:w]),mean(mseKauto5[1:w]))
> #MSEv <- c(sd(mseKauto[1:w]),sd(mseKauto2[1:w]),sd(mseKauto3[1:w]),sd(mseKauto4[1:w]),sd(mseKauto5[1:w]))
> #L <- MSE-1.96*MSEv/sqrt(w)
> #U <- MSE+1.96*MSEv/sqrt(w)
> #plot(x=seq(0.15,0.55,0.1),y=MSE,xlab="quantile",type="b",lty=1,col=2,xaxt="n",ylim=c(0.46,0.60),main=expression(paste(rho," ","=0"," , ",phi," ","=0.2")))
> #lines(x=seq(0.15,0.55,0.1),y=L,type="b",lty=2,col=4)
> #lines(x=seq(0.15,0.55,0.1),y=U,type="b",lty=2,col=4)
> #axis(1,seq(0.15,0.55,0.1))
> #dev.off()
> save.image("021result.RData")
> 
> 
> proc.time()
   使用者      系統      流逝 
34022.300  2130.949 36805.902 
